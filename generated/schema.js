"use strict";
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var graph_ts_1 = require("@graphprotocol/graph-ts");
var Moloch = /** @class */ (function (_super) {
    __extends(Moloch, _super);
    function Moloch(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Moloch.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save Moloch entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Moloch entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("Moloch", id.toString(), this);
    };
    Moloch.load = function (id) {
        return graph_ts_1.store.get("Moloch", id);
    };
    Object.defineProperty(Moloch.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "summoner", {
        get: function () {
            var value = this.get("summoner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("summoner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "summoningTime", {
        get: function () {
            var value = this.get("summoningTime");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("summoningTime", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "periodDuration", {
        get: function () {
            var value = this.get("periodDuration");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("periodDuration", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "votingPeriodLength", {
        get: function () {
            var value = this.get("votingPeriodLength");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("votingPeriodLength", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "gracePeriodLength", {
        get: function () {
            var value = this.get("gracePeriodLength");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("gracePeriodLength", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "proposalDeposit", {
        get: function () {
            var value = this.get("proposalDeposit");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("proposalDeposit", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "dilutionBound", {
        get: function () {
            var value = this.get("dilutionBound");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("dilutionBound", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "processingReward", {
        get: function () {
            var value = this.get("processingReward");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("processingReward", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "depositToken", {
        get: function () {
            var value = this.get("depositToken");
            return value.toString();
        },
        set: function (value) {
            this.set("depositToken", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "approvedTokens", {
        get: function () {
            var value = this.get("approvedTokens");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("approvedTokens", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "tokens", {
        get: function () {
            var value = this.get("tokens");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("tokens", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "members", {
        get: function () {
            var value = this.get("members");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("members");
            }
            else {
                this.set("members", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "tokenBalances", {
        get: function () {
            var value = this.get("tokenBalances");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("tokenBalances");
            }
            else {
                this.set("tokenBalances", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "proposals", {
        get: function () {
            var value = this.get("proposals");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("proposals");
            }
            else {
                this.set("proposals", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "guildTokenBalance", {
        get: function () {
            var value = this.get("guildTokenBalance");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("guildTokenBalance");
            }
            else {
                this.set("guildTokenBalance", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "escrowTokenBalance", {
        get: function () {
            var value = this.get("escrowTokenBalance");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("escrowTokenBalance");
            }
            else {
                this.set("escrowTokenBalance", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "currentPeriod", {
        get: function () {
            var value = this.get("currentPeriod");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("currentPeriod", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "totalShares", {
        get: function () {
            var value = this.get("totalShares");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalShares", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "totalLoot", {
        get: function () {
            var value = this.get("totalLoot");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalLoot", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "proposalCount", {
        get: function () {
            var value = this.get("proposalCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("proposalCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "proposalQueueCount", {
        get: function () {
            var value = this.get("proposalQueueCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("proposalQueueCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "proposedToJoin", {
        get: function () {
            var value = this.get("proposedToJoin");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("proposedToJoin");
            }
            else {
                this.set("proposedToJoin", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "proposedToWhitelist", {
        get: function () {
            var value = this.get("proposedToWhitelist");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("proposedToWhitelist");
            }
            else {
                this.set("proposedToWhitelist", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "proposedToKick", {
        get: function () {
            var value = this.get("proposedToKick");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("proposedToKick");
            }
            else {
                this.set("proposedToKick", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "proposedToFund", {
        get: function () {
            var value = this.get("proposedToFund");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("proposedToFund");
            }
            else {
                this.set("proposedToFund", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Moloch.prototype, "proposedToTrade", {
        get: function () {
            var value = this.get("proposedToTrade");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("proposedToTrade");
            }
            else {
                this.set("proposedToTrade", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    return Moloch;
}(graph_ts_1.Entity));
exports.Moloch = Moloch;
var TokenBalance = /** @class */ (function (_super) {
    __extends(TokenBalance, _super);
    function TokenBalance(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    TokenBalance.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save TokenBalance entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save TokenBalance entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("TokenBalance", id.toString(), this);
    };
    TokenBalance.load = function (id) {
        return graph_ts_1.store.get("TokenBalance", id);
    };
    Object.defineProperty(TokenBalance.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenBalance.prototype, "moloch", {
        get: function () {
            var value = this.get("moloch");
            return value.toString();
        },
        set: function (value) {
            this.set("moloch", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenBalance.prototype, "token", {
        get: function () {
            var value = this.get("token");
            return value.toString();
        },
        set: function (value) {
            this.set("token", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenBalance.prototype, "tokenBalance", {
        get: function () {
            var value = this.get("tokenBalance");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenBalance", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenBalance.prototype, "member", {
        get: function () {
            var value = this.get("member");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("member");
            }
            else {
                this.set("member", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenBalance.prototype, "guildBank", {
        get: function () {
            var value = this.get("guildBank");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("guildBank", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenBalance.prototype, "ecrowBank", {
        get: function () {
            var value = this.get("ecrowBank");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("ecrowBank", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenBalance.prototype, "memberBank", {
        get: function () {
            var value = this.get("memberBank");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("memberBank", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    return TokenBalance;
}(graph_ts_1.Entity));
exports.TokenBalance = TokenBalance;
var Token = /** @class */ (function (_super) {
    __extends(Token, _super);
    function Token(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Token.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save Token entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Token entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("Token", id.toString(), this);
    };
    Token.load = function (id) {
        return graph_ts_1.store.get("Token", id);
    };
    Object.defineProperty(Token.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Token.prototype, "moloch", {
        get: function () {
            var value = this.get("moloch");
            return value.toString();
        },
        set: function (value) {
            this.set("moloch", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Token.prototype, "tokenAddress", {
        get: function () {
            var value = this.get("tokenAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("tokenAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Token.prototype, "whitelisted", {
        get: function () {
            var value = this.get("whitelisted");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("whitelisted", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Token.prototype, "ticker", {
        get: function () {
            var value = this.get("ticker");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("ticker");
            }
            else {
                this.set("ticker", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Token.prototype, "logo", {
        get: function () {
            var value = this.get("logo");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("logo");
            }
            else {
                this.set("logo", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Token.prototype, "details", {
        get: function () {
            var value = this.get("details");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("details");
            }
            else {
                this.set("details", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Token.prototype, "approved", {
        get: function () {
            var value = this.get("approved");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("approved");
            }
            else {
                this.set("approved", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    return Token;
}(graph_ts_1.Entity));
exports.Token = Token;
var Member = /** @class */ (function (_super) {
    __extends(Member, _super);
    function Member(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Member.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save Member entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Member entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("Member", id.toString(), this);
    };
    Member.load = function (id) {
        return graph_ts_1.store.get("Member", id);
    };
    Object.defineProperty(Member.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "moloch", {
        get: function () {
            var value = this.get("moloch");
            return value.toString();
        },
        set: function (value) {
            this.set("moloch", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "memberAddress", {
        get: function () {
            var value = this.get("memberAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("memberAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "delegateKey", {
        get: function () {
            var value = this.get("delegateKey");
            return value.toBytes();
        },
        set: function (value) {
            this.set("delegateKey", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "shares", {
        get: function () {
            var value = this.get("shares");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("shares", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "loot", {
        get: function () {
            var value = this.get("loot");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("loot", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "exists", {
        get: function () {
            var value = this.get("exists");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("exists", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "highestIndexYesVote", {
        get: function () {
            var value = this.get("highestIndexYesVote");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("highestIndexYesVote");
            }
            else {
                this.set("highestIndexYesVote", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "tokenTribute", {
        get: function () {
            var value = this.get("tokenTribute");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenTribute", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "didRagequit", {
        get: function () {
            var value = this.get("didRagequit");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("didRagequit", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "votes", {
        get: function () {
            var value = this.get("votes");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("votes");
            }
            else {
                this.set("votes", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "submissions", {
        get: function () {
            var value = this.get("submissions");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("submissions");
            }
            else {
                this.set("submissions", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "tokenBalances", {
        get: function () {
            var value = this.get("tokenBalances");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("tokenBalances");
            }
            else {
                this.set("tokenBalances", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "proposedToKick", {
        get: function () {
            var value = this.get("proposedToKick");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("proposedToKick", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "kicked", {
        get: function () {
            var value = this.get("kicked");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("kicked", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Member.prototype, "jailed", {
        get: function () {
            var value = this.get("jailed");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("jailed");
            }
            else {
                this.set("jailed", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    return Member;
}(graph_ts_1.Entity));
exports.Member = Member;
var Vote = /** @class */ (function (_super) {
    __extends(Vote, _super);
    function Vote(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Vote.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save Vote entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Vote entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("Vote", id.toString(), this);
    };
    Vote.load = function (id) {
        return graph_ts_1.store.get("Vote", id);
    };
    Object.defineProperty(Vote.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Vote.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toString();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Vote.prototype, "proposal", {
        get: function () {
            var value = this.get("proposal");
            return value.toString();
        },
        set: function (value) {
            this.set("proposal", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Vote.prototype, "member", {
        get: function () {
            var value = this.get("member");
            return value.toString();
        },
        set: function (value) {
            this.set("member", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Vote.prototype, "uintVote", {
        get: function () {
            var value = this.get("uintVote");
            return value.toI32();
        },
        set: function (value) {
            this.set("uintVote", graph_ts_1.Value.fromI32(value));
        },
        enumerable: true,
        configurable: true
    });
    return Vote;
}(graph_ts_1.Entity));
exports.Vote = Vote;
var Proposal = /** @class */ (function (_super) {
    __extends(Proposal, _super);
    function Proposal(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Proposal.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save Proposal entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Proposal entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("Proposal", id.toString(), this);
    };
    Proposal.load = function (id) {
        return graph_ts_1.store.get("Proposal", id);
    };
    Object.defineProperty(Proposal.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "proposalIndex", {
        get: function () {
            var value = this.get("proposalIndex");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("proposalIndex", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "proposalId", {
        get: function () {
            var value = this.get("proposalId");
            if (value === null) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("proposalId");
            }
            else {
                this.set("proposalId", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "moloch", {
        get: function () {
            var value = this.get("moloch");
            return value.toString();
        },
        set: function (value) {
            this.set("moloch", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toString();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "member", {
        get: function () {
            var value = this.get("member");
            return value.toString();
        },
        set: function (value) {
            this.set("member", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "memberAddress", {
        get: function () {
            var value = this.get("memberAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("memberAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "delegateKey", {
        get: function () {
            var value = this.get("delegateKey");
            return value.toBytes();
        },
        set: function (value) {
            this.set("delegateKey", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "applicant", {
        get: function () {
            var value = this.get("applicant");
            return value.toBytes();
        },
        set: function (value) {
            this.set("applicant", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "proposer", {
        get: function () {
            var value = this.get("proposer");
            return value.toBytes();
        },
        set: function (value) {
            this.set("proposer", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "sponsor", {
        get: function () {
            var value = this.get("sponsor");
            return value.toBytes();
        },
        set: function (value) {
            this.set("sponsor", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "sharesRequested", {
        get: function () {
            var value = this.get("sharesRequested");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("sharesRequested", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "lootRequested", {
        get: function () {
            var value = this.get("lootRequested");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("lootRequested", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "tributeOffered", {
        get: function () {
            var value = this.get("tributeOffered");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tributeOffered", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "tributeToken", {
        get: function () {
            var value = this.get("tributeToken");
            return value.toBytes();
        },
        set: function (value) {
            this.set("tributeToken", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "paymentRequested", {
        get: function () {
            var value = this.get("paymentRequested");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("paymentRequested", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "paymentToken", {
        get: function () {
            var value = this.get("paymentToken");
            return value.toBytes();
        },
        set: function (value) {
            this.set("paymentToken", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "startingPeriod", {
        get: function () {
            var value = this.get("startingPeriod");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("startingPeriod", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "yesVotes", {
        get: function () {
            var value = this.get("yesVotes");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("yesVotes", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "noVotes", {
        get: function () {
            var value = this.get("noVotes");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("noVotes", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "sponsored", {
        get: function () {
            var value = this.get("sponsored");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("sponsored", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "processed", {
        get: function () {
            var value = this.get("processed");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("processed", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "didPass", {
        get: function () {
            var value = this.get("didPass");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("didPass", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "cancelled", {
        get: function () {
            var value = this.get("cancelled");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("cancelled", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "whitelist", {
        get: function () {
            var value = this.get("whitelist");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("whitelist", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "guildkick", {
        get: function () {
            var value = this.get("guildkick");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("guildkick", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "newMember", {
        get: function () {
            var value = this.get("newMember");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("newMember", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "trade", {
        get: function () {
            var value = this.get("trade");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("trade", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "details", {
        get: function () {
            var value = this.get("details");
            return value.toString();
        },
        set: function (value) {
            this.set("details", graph_ts_1.Value.fromString(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "maxTotalSharesAndLootAtYesVote", {
        get: function () {
            var value = this.get("maxTotalSharesAndLootAtYesVote");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("maxTotalSharesAndLootAtYesVote", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "votes", {
        get: function () {
            var value = this.get("votes");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("votes");
            }
            else {
                this.set("votes", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "yesShares", {
        get: function () {
            var value = this.get("yesShares");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("yesShares", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Proposal.prototype, "noShares", {
        get: function () {
            var value = this.get("noShares");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("noShares", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: true,
        configurable: true
    });
    return Proposal;
}(graph_ts_1.Entity));
exports.Proposal = Proposal;
